{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Introduction to Data Science\n",
    "## Homework 3: Due 5pm to My Mailbox (2nd Floor, 19 W 4th St) Wednesday April 19th"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Student Name:  Sharang Biradar\n",
    "\n",
    "Student Netid: sdb418\n",
    "***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this assignment we will be looking at data generated by particle physicists to test whether machine learning can help classify whether certain particle decay experiments identify the presence of a Higgs Boson. One does not need to know anything about particle physics to do well here, but if you are curious, full feature and data descriptions can be found here:\n",
    "\n",
    "- https://www.kaggle.com/c/higgs-boson/data\n",
    "- http://higgsml.lal.in2p3.fr/files/2014/04/documentation_v1.8.pdf\n",
    "\n",
    "The goal of this assignment is to learn to use cross-validation for model selection. Weâ€™ll also use learning curve analysis to understand how well different algorithms make use of limited data. For more documentation on cross-validation with Python, you can consult the following:\n",
    "\n",
    "- http://scikit-learn.org/stable/modules/cross_validation.html#cross-validation\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part 1: Data preparation\n",
    "Create a data preparation and cleaning function that does the following:\n",
    "- Has a single input that is a file name string\n",
    "- Reads data (the data is comma separated, has a row header and the first column `EventID` is the index) into a pandas `dataframe`\n",
    "- Cleans the data\n",
    "  - Convert the feature `Label` to numeric (choose the minority class to be equal to 1)\n",
    "    - Create a feature `Y` with numeric label\n",
    "    - Drop the feature `Label`\n",
    "  - If a feature has missing values (i.e., `-999`): \n",
    "    - Create a dummy variable for the missing value\n",
    "      - Call the variable `orig_var_name` + `_mv` where `orig_var_name` is the name of the actual var with a missing value\n",
    "      - Give this new variable a 1 if the original variable is missing\n",
    "    - Replace the missing value with the average of the feature (make sure to compute the mean on records where the value isn't missing). You may find pandas' `.replace()` function useful.\n",
    "- After the above is done, rescales the data so that each feature has zero mean and unit variance (hint: look up sklearn.preprocessing)\n",
    "- Returns the cleaned and rescaled dataset\n",
    "\n",
    "Hint: as a guide, this function can easily be done in less than 15 lines."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn import preprocessing\n",
    "import os\n",
    "def cleanBosonData(infile_name):\n",
    "    #Get the data\n",
    "    datadir = '\\\\'.join(os.getcwd().split('\\\\')[0:]) + '\\\\data\\\\'\n",
    "    data = pd.read_csv(datadir + infile_name, sep=',',index_col=0)\n",
    "    \n",
    "    #Replace minority class with '1' and majority class with '0' on the column 'Label' and rename it as 'Y': \n",
    "    data['Label']=data['Label'].replace([data['Label'].value_counts().idxmax(),data['Label'].value_counts().idxmin()],[0,1])\n",
    "    data=data.rename(columns={\"Label\": \"Y\"})\n",
    "    \n",
    "    #Replace all -999 with NaN\n",
    "    data=data.replace(-999,np.nan)\n",
    "    X_col=data.shape[1] #Get the original number of columns\n",
    "    \n",
    "    #Append 'mv' columns to the original dataframe\n",
    "    for i in data.columns:\n",
    "        if (np.any(data[i].isnull())):\n",
    "            data[i+'_mv']=0\n",
    "            data.loc[data[i].isnull(),i+'_mv']=1\n",
    "            data[i]=data[i].replace(np.nan,data[i].mean())\n",
    "    \n",
    "    #Rescale the features(i.e.X) and exchange it with the original X in the dataframe\n",
    "    data_clean=preprocessing.scale(data.iloc[:,:X_col-1])\n",
    "    data.iloc[:,:X_col-1]=data_clean\n",
    "    return data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part 2: Basic evaluations\n",
    "In this part you will build an out-of-the box logistic regression (LR) model and support vector machine (SVM). You will then plot ROC for the LR and SVM model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1\\. Clean the two data files included in this assignment (`boson_training_cut_2000.csv` and `boson_testing_cut.csv`) and use them as training and testing data sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_train = cleanBosonData(\"boson_training_cut_2000.csv\")\n",
    "data_test = cleanBosonData(\"boson_testing_cut.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2\\. On the training set, build the following models:\n",
    "\n",
    "- A logistic regression using sklearn's `linear_model.LogisticRegression()`. For this model, use `C=1e30`.\n",
    "- An SVM using sklearn's `svm.svc()`. For this model, specify that `kernel=\"linear\"`.\n",
    "\n",
    "For each model above, plot the ROC curve of both models on the same plot. Make sure to use the test set for computing and plotting. In the legend, also print out the Area Under the ROC (AUC) for reference."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x22624da8da0>"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nnRI74ZcdTN35g7inXwWnIxUb27dvp2nTpixbtgyAGTNmsHjxYn7//XcVbBEREZF/qESPZL+Z9RZJ\nNonoj+6j+y2XExZZoj/ds7J582Z69uzJ1q1bAVi8eDHt2rWjdevWDicTERERKTlKbOvMtbkMTXma\noAM1uPPQQG7rV7pXFPF4PFx++eV89913ANSqVYupU6dy0003OZxMREREpOQpsdNFXsp4iQxXOpWW\nd6T7gHCn4zjmj5VYXC4XbrebevXq8cUXX7B7924VbBEREZFCUiJL9k+5PzE+/UXKf385XYPvJzSi\nxA7Yn9GyZcuoUaMGTZo0Yf78+QB8//337Nixg5YtWzqcTkRERKRkK3ElO9WTyl1Jd+ObG0DtKcNo\n16V0vdnxrbfeIjo6mvbt27Nv3z5iYmJo0qQJoGX4RERERIpKiRviHZM+ht88v1F/zESua1CLStF+\nTkcqMgcOHKBz584AXHXVVcydO5e6des6nEpERESk9ClxQ5tbcr7BWBehW67kxo7lnI5T6F5++WVi\nYmLweDxER0czevRo9u3bx7p161SwRURERBxSokaykz3JbHNvo+q6doRG+nBp4zJORyoUHo+HiRMn\nMnr0aFJSUjDGsGXLFpo0acLQoUOdjiciIiJS6pWokr0iewUA5T+8hdvuC8EY43Cigrd69Wo6duxI\neno6LpeL9u3bM2vWLCIjI52OJiIiIiLHlZjpIh7rYWrGNAIyKnLh741oc0fJmSridrtPbB5Tp04d\ncnNz6dy5M4mJibz//vsq2CIiIiLFTIkZyV6UtYg9eXuouXAI19wcgsvl/aPYOTk5DBkyhBkzZgCQ\nnp5OtWrVyMzM1EohIiIiIsVYiSnZz6aPoVx6FJVW3kbH1d69u2N2djYDBgxg3rx55OTk4O/vT9eu\nXfF4PICW4hMREREp7kpEW1t/dD0pNoXA/zamVZtylKvg43Skf6RXr17MmDEDl8tF//79SU9PZ8aM\nGfj7+zsdTURERETOQokYyV5x9GMAqi3qTf3e3reiSEpKCg899BDR0dG88MILTJgwgejoaEaOHImv\nb4n4EomIiIiUKl4/kp1n85iXOY9KPzehTEIULdsEOx3prCUkJNChQwfCwsJ44403WLJkCQDh4eGM\nGTNGBVtERETES3l9yV6evRw3boI+uYb/uzIA/zLe8YbHbt26ERkZyfvvv09ISAjjx49nz549TscS\n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\nYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x226235b1898>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import roc_curve, auc\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.cross_validation import KFold\n",
    "%matplotlib inline\n",
    "\n",
    "def plotUnivariateROC(preds, truth, label_string):\n",
    "    #1. call the roc_curve function to get the ROC X and Y values\n",
    "    fpr, tpr, thresholds = roc_curve(truth, preds)\n",
    "    #2. Input fpr and tpr into the auc function to get the AUC\n",
    "    roc_auc = auc(fpr, tpr)\n",
    "    #we are doing this as a special case because we are sending unfitted predictions into the function\n",
    "    if roc_auc < 0.5:\n",
    "        fpr, tpr, thresholds = roc_curve(truth, -1 * preds)\n",
    "        roc_auc = auc(fpr, tpr)\n",
    "        print('Warning:{} is worse than random!'.format(label_string))\n",
    "    #chooses a random color for plotting\n",
    "    c = (np.random.rand(), np.random.rand(), np.random.rand())\n",
    "    #create a plot and set some options\n",
    "    plt.plot(fpr, tpr, color = c, label = label_string + ' (AUC = %0.3f)' % roc_auc)\n",
    "    \n",
    "\n",
    "    plt.plot([0, 1], [0, 1], 'k--')\n",
    "    plt.xlim([0.0, 1.0])\n",
    "    plt.ylim([0.0, 1.0])\n",
    "    plt.xlabel('FPR')\n",
    "    plt.ylabel('TPR')\n",
    "    plt.title('ROC')\n",
    "    plt.legend(loc=\"lower right\")\n",
    "    \n",
    "    return roc_auc\n",
    "\n",
    "#We only need X and Y for data_train and data_test, 'mv' columns are not included in the dataframe below \n",
    "data_train=data_train.iloc[:,data_train.columns.slice_indexer(end='Y')]\n",
    "data_test=data_test.iloc[:,data_test.columns.slice_indexer(end='Y')]\n",
    "\n",
    "X_train=data_train.drop('Y', axis=1)\n",
    "Y_train=data_train['Y']\n",
    "X_test =data_test.drop('Y', axis=1)\n",
    "Y_test =data_test['Y']\n",
    "\n",
    "lr = LogisticRegression(C = 1e30)\n",
    "lr.fit(X_train, Y_train)\n",
    "preds_lr = lr.predict_proba(X_test)[:, 1]\n",
    "\n",
    "SVM=SVC(kernel='linear',probability=True)\n",
    "SVM.fit(X_train, Y_train)\n",
    "preds_SVM=SVM.predict_proba(X_test)[:, 1]\n",
    "\n",
    "fig = plt.figure(figsize = (12, 6))\n",
    "ax = plt.subplot(111)\n",
    "\n",
    "plotUnivariateROC(preds_lr, Y_test, 'LR')\n",
    "plotUnivariateROC(preds_SVM, Y_test, 'SVM')\n",
    "\n",
    "box = ax.get_position()\n",
    "ax.set_position([box.x0, box.y0 + box.height * 0.0 , box.width, box.height * 1])\n",
    "ax.legend(loc = 'upper center', bbox_to_anchor = (0.5, -0.15), fancybox = True, \n",
    "              shadow = True, ncol = 4, prop = {'size':10})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3\\. Which of the two models is generally better at ranking the test set? Are there any classification thresholds where the model identified above as \"better\" would underperform the other in a classification metric (such as TPR)?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***Answer:***    \n",
    "1. LR model is better than SVM model because LR's AUC is larger than SVM's.  \n",
    "2. Yes, we can see when FPR is less than 0.1, the LR curve is slightly below the SVM curve somewhere, which means LR underperform SVM in TPR metric there."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part 3: Model selection with cross-validation\n",
    "We think we might be able to improve the performance of the SVM if we perform a grid search on the hyper-parameter $C$.  Because we only have 1000 instances, we will have to use cross-validation to find the optimal $C$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1\\. Write a cross-validation function that does the following:\n",
    "- Takes as inputs a dataset, a label name, # of splits/folds (`k`), a sequence of values for $C$ (`cs`)\n",
    "- Performs two loops\n",
    "  - Outer Loop: `for each f in range(k)`:\n",
    "    - Splits the data into `data_train` & `data_validate` according to cross-validation logic\n",
    "  - Inner Loop: `for each c in cs`:\n",
    "    - Trains an SVM on training split with `C=c, kernel=\"linear\"`\n",
    "    - Computes AUC_c_k on validation data\n",
    "    - Stores AUC_c_k in a  dictionary of values\n",
    "- Returns a dictionary, where each key-value pair is: `c:[auc-c1,auc-c2,..auc-ck]`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/SHARANG/anaconda/lib/python3.6/site-packages/sklearn/cross_validation.py:44: DeprecationWarning: This module was deprecated in version 0.18 in favor of the model_selection module into which all the refactored classes and functions are moved. Also note that the interface of the new CV iterators are different from that of this module. This module will be removed in 0.20.\n",
      "  \"This module will be removed in 0.20.\", DeprecationWarning)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.cross_validation import KFold\n",
    "\n",
    "def xValSVM(dataset, label_name, k, cs):\n",
    "    kf = KFold(dataset.shape[0], n_folds = k, shuffle=True)\n",
    "    aucs=dict()\n",
    "    for c in cs:\n",
    "        aucs[c]=list()\n",
    "    kf_number=0 #In case there is one cruve, whose AUC is under 0.5, then we need to report it as a warning. kf_number tells you it's which fold.\n",
    "    for train_index, test_index in kf:\n",
    "        kf_number+=1\n",
    "        X=dataset.drop(label_name,1)\n",
    "        y=dataset[label_name]\n",
    "        X_train, X_test = X.iloc[train_index,:], X.iloc[test_index,:]\n",
    "        y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n",
    "        for c in cs:\n",
    "            SVM=SVC(C=c, kernel='linear',probability=True)\n",
    "            SVM.fit(X_train,y_train)\n",
    "            preds_SVM=SVM.predict_proba(X_test)[:, 1]\n",
    "            fpr, tpr, thresholds = roc_curve(y_test, preds_SVM)\n",
    "            AUC_c_k = auc(fpr, tpr)\n",
    "            if AUC_c_k < 0.5:\n",
    "                fpr, tpr, thresholds = roc_curve(truth, -1 * preds)\n",
    "                AUC_c_k = auc(fpr, tpr)\n",
    "                print('Warning:c{}f{} is worse than random!'.format(c,kf_number))\n",
    "            aucs[c].append(AUC_c_k)\n",
    "    return aucs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2\\. Using the function written above, do the following:\n",
    "- Generate a sequence of 10 $C$ values in the interval `[10^(-8), ..., 10^1]` (i.e., do all powers of 10 from -8 to 1).\n",
    "2.\tCall aucs = xValSVM(train, â€˜Yâ€™, 10, cs)\n",
    "3.\tFor each c in cs, get mean(AUC) and StdErr(AUC) \n",
    "4.\tCompute the value for max(meanAUC-StdErr(AUC)) across all values of c.\n",
    "5.\tGenerate a plot with the following:\n",
    "a.\tLog10(c) on the x-axis\n",
    "b.\t1 series with mean(AUC) for each c\n",
    "c.\t1 series with mean(AUC)-stderr(AUC) for each c (use â€˜k+â€™ as color pattern)\n",
    "d.\t1 series with mean(AUC)+stderr(AUC) for each c (use â€˜k--â€˜ as color pattern)\n",
    "e.\ta reference line for max(AUC-StdErr(AUC)) (use â€˜râ€™ as color pattern)\n",
    "\n",
    "Then answer the question: Did the model parameters selected beat the out-of-the-box model for SVM? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'np' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-3-851e3e512b6b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mscipy\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mstats\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mpowers\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m8\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfloat\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mcs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mpowers\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0maucs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mxValSVM\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_train\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'Y'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'np' is not defined"
     ]
    }
   ],
   "source": [
    "from scipy import stats\n",
    "\n",
    "powers=np.arange(-8,2,dtype=np.float)\n",
    "cs=10**powers\n",
    "aucs=xValSVM(data_train,'Y',10, cs)\n",
    "means=list()\n",
    "StdErrs=list()\n",
    "for c in aucs:\n",
    "    means.append(np.mean(aucs[c]))\n",
    "    StdErrs.append(stats.sem(aucs[c]))\n",
    "difs=np.array(means)-np.array(StdErrs)\n",
    "sums=np.array(means)+np.array(StdErrs)\n",
    "dif_max=max(difs)\n",
    "\n",
    "fig = plt.figure(figsize = (10, 6))\n",
    "ax = plt.subplot(111)\n",
    "\n",
    "plt.plot(np.log10(cs), means, label = 'mean')\n",
    "plt.plot(np.log10(cs), difs, 'k+', label = 'mean-stderr')\n",
    "plt.plot(np.log10(cs), sums, 'k--', label = 'mean+stderr')\n",
    "plt.plot(np.log10(cs), dif_max * np.ones(len(cs)), color='r',label = 'max(mean-stderr)')\n",
    "plt.legend(loc=4,prop={'size':15})\n",
    "\n",
    "ax.set_xlabel('Log10 of C',fontsize=18)\n",
    "ax.set_ylabel('AUC Value',fontsize=18)\n",
    "plt.title('AUC Results for Different Cs',fontsize=18)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dif_max=0.7339596083886132\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>stderr</th>\n",
       "      <th>mean-stderr</th>\n",
       "      <th>mean+stderr</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Log10C</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>-8</th>\n",
       "      <td>0.687196</td>\n",
       "      <td>0.014904</td>\n",
       "      <td>0.672292</td>\n",
       "      <td>0.702100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>-7</th>\n",
       "      <td>0.686792</td>\n",
       "      <td>0.014764</td>\n",
       "      <td>0.672028</td>\n",
       "      <td>0.701555</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>-6</th>\n",
       "      <td>0.689002</td>\n",
       "      <td>0.014314</td>\n",
       "      <td>0.674688</td>\n",
       "      <td>0.703317</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>-5</th>\n",
       "      <td>0.708465</td>\n",
       "      <td>0.016765</td>\n",
       "      <td>0.691700</td>\n",
       "      <td>0.725231</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>-4</th>\n",
       "      <td>0.711086</td>\n",
       "      <td>0.016179</td>\n",
       "      <td>0.694907</td>\n",
       "      <td>0.727264</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>-3</th>\n",
       "      <td>0.713395</td>\n",
       "      <td>0.016170</td>\n",
       "      <td>0.697224</td>\n",
       "      <td>0.729565</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>-2</th>\n",
       "      <td>0.733650</td>\n",
       "      <td>0.013979</td>\n",
       "      <td>0.719671</td>\n",
       "      <td>0.747628</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>-1</th>\n",
       "      <td>0.745696</td>\n",
       "      <td>0.013287</td>\n",
       "      <td>0.732408</td>\n",
       "      <td>0.758983</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.746821</td>\n",
       "      <td>0.012899</td>\n",
       "      <td>0.733921</td>\n",
       "      <td>0.759720</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.746861</td>\n",
       "      <td>0.012901</td>\n",
       "      <td>0.733960</td>\n",
       "      <td>0.759762</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            mean    stderr  mean-stderr  mean+stderr\n",
       "Log10C                                              \n",
       "-8      0.687196  0.014904     0.672292     0.702100\n",
       "-7      0.686792  0.014764     0.672028     0.701555\n",
       "-6      0.689002  0.014314     0.674688     0.703317\n",
       "-5      0.708465  0.016765     0.691700     0.725231\n",
       "-4      0.711086  0.016179     0.694907     0.727264\n",
       "-3      0.713395  0.016170     0.697224     0.729565\n",
       "-2      0.733650  0.013979     0.719671     0.747628\n",
       "-1      0.745696  0.013287     0.732408     0.758983\n",
       " 0      0.746821  0.012899     0.733921     0.759720\n",
       " 1      0.746861  0.012901     0.733960     0.759762"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#For this block, I just wanna figure out between C=1 and C=10 which gets the best mean AUC.It turns out C=10 is slightly better than C=1.\n",
    "df_Cs = pd.DataFrame(np.array(means), columns=['mean'], index=np.arange(-8,2))\n",
    "df_Cs['stderr']=StdErrs\n",
    "df_Cs['mean-stderr']=difs\n",
    "df_Cs['mean+stderr']=sums\n",
    "print('dif_max={}'.format(dif_max))\n",
    "df_Cs.index.name='Log10C'\n",
    "df_Cs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***Answer:***    \n",
    "No, except the last one(C=10), which is slightly better than C=1. This is because the out-of-the-box model of SVM means the C is default value(which is 1). From the graph we plotted, we can see that no mean AUC values exceed that of log10C=0(C=1) except the last one(C=10)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3\\. Which of the two algorithms are more suitable for smaller sample sizes, given the set of features? If it costs twice the investment to run enough experiments to double the data, do you think it is a worthy investment?\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***Answer:***    \n",
    "1. The one using the k-fold function is more suitable. We can see that in one set of k-fold results, the values flucatuate so much(there is a big distance between 'mean-stderr' and 'mean+stderr'). If we use k-fold function, we can get the average AUC values which shave the fluctuation of the dataset.  \n",
    "2. It's not a worthy investment, since the difference between the results of Part2(52000 instances) and Part3(2000 instances) is only 0.01, even though Part2's result is better."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4\\. Is there a reason why cross-validation might be biased? If so, in what direction is it biased? (Hint: refer to ESL figure 7.8)?\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***Answer:***    \n",
    "![Screenshot](Capture.png)  \n",
    "Yes. In this figure, the curve increases rapidly at beginning and then slowly when the size of training set is after 100. When you do a fivefold cross-validation based on a size of training set 200, the performance of the classifier will be similar for a size of 200 and a size of 160,which is the size of cross-validation training set. But when the training set is so small, for example 50, the performance of the classifier will be considerably different for a size of 50 and a size of 40, which is the size of cross-validation training. Cross-validation training set(a size of 40) will perform with more errors, which a training set with 50 instances shouldn't have. In other words, cross-validation overestimate the prediction error for original training data. Hence as an estimate of errors, cross-validation would be biased upward."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
